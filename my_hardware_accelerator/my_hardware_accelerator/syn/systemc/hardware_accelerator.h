// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _hardware_accelerator_HH_
#define _hardware_accelerator_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct hardware_accelerator : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > IN_r_TDATA;
    sc_in< sc_logic > IN_r_TVALID;
    sc_out< sc_logic > IN_r_TREADY;
    sc_in< sc_lv<4> > IN_r_TKEEP;
    sc_in< sc_lv<1> > IN_r_TLAST;
    sc_out< sc_lv<32> > OUT_r_TDATA;
    sc_out< sc_logic > OUT_r_TVALID;
    sc_in< sc_logic > OUT_r_TREADY;
    sc_out< sc_lv<4> > OUT_r_TKEEP;
    sc_out< sc_lv<1> > OUT_r_TLAST;


    // Module declarations
    hardware_accelerator(sc_module_name name);
    SC_HAS_PROCESS(hardware_accelerator);

    ~hardware_accelerator();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    regslice_both<32>* regslice_both_IN_data_V_U;
    regslice_both<4>* regslice_both_IN_keep_V_U;
    regslice_both<1>* regslice_both_IN_last_V_U;
    regslice_both<32>* regslice_both_OUT_data_V_U;
    regslice_both<4>* regslice_both_OUT_keep_V_U;
    regslice_both<1>* regslice_both_OUT_last_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > IN_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln22_fu_80_p2;
    sc_signal< sc_logic > OUT_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > i_fu_86_p2;
    sc_signal< sc_lv<4> > i_reg_116;
    sc_signal< sc_logic > regslice_both_OUT_data_V_U_apdone_blk;
    sc_signal< bool > ap_block_state2;
    sc_signal< bool > ap_block_state2_io;
    sc_signal< sc_lv<4> > i_0_reg_69;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > regslice_both_IN_data_V_U_apdone_blk;
    sc_signal< sc_lv<32> > IN_r_TDATA_int;
    sc_signal< sc_logic > IN_r_TVALID_int;
    sc_signal< sc_logic > IN_r_TREADY_int;
    sc_signal< sc_logic > regslice_both_IN_data_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_IN_keep_V_U_apdone_blk;
    sc_signal< sc_lv<4> > IN_r_TKEEP_int;
    sc_signal< sc_logic > regslice_both_IN_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_IN_keep_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_IN_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > IN_r_TLAST_int;
    sc_signal< sc_logic > regslice_both_IN_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_IN_last_V_U_ack_in;
    sc_signal< sc_lv<32> > OUT_r_TDATA_int;
    sc_signal< sc_logic > OUT_r_TVALID_int;
    sc_signal< sc_logic > OUT_r_TREADY_int;
    sc_signal< sc_logic > regslice_both_OUT_data_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_OUT_keep_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_OUT_keep_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_OUT_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_OUT_last_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_OUT_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_OUT_last_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_FF;
    static const sc_lv<1> ap_const_lv1_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_IN_r_TDATA_blk_n();
    void thread_IN_r_TREADY();
    void thread_IN_r_TREADY_int();
    void thread_OUT_r_TDATA_blk_n();
    void thread_OUT_r_TDATA_int();
    void thread_OUT_r_TVALID();
    void thread_OUT_r_TVALID_int();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state2();
    void thread_ap_block_state2_io();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_i_fu_86_p2();
    void thread_icmp_ln22_fu_80_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
